name: vulog_technical_test
description: Technical test for Vulog

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.18.2 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
    # By default, Flutter only provides US English localizations
    # to add other localizations we use flutter_localizations sdk
  flutter_localizations:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  # Smart project structure with dependency injection and route management
  flutter_modular: ^5.0.3
  # Package to handle dynamic String & Json interpolation.
  interpolation: ^2.1.2
  # Adds support for google fonts
  google_fonts: ^3.0.1
  # dio client generator using source_gen
  retrofit: ^3.3.1
  # Http client for Dart, which supports Interceptors, Global configuration, FormData,
  # Request Cancellation, File downloading, Timeout etc
  dio: ^4.0.6
  # Classes and helper functions that support JSON code generation via the `json_serializable` package
  json_annotation: ^4.7.0
  # helps to implement value based equality without needing to explicitly override == and hashCode
  equatable: ^2.0.5
  # We are using provider as state management
  provider: ^6.0.4
  # Dio interceptor that logs network calls in a pretty, easy to read format
  pretty_dio_logger: ^1.1.1
  # Mocking fake API for test purposes
  mockito: ^5.3.2
  # Package to test pages with modular
  modular_test: ^2.0.0
  # reading and writing simple key-value pairs. Wraps NSUserDefaults on iOS and SharedPreferences on Android
  shared_preferences: ^2.0.15

dev_dependencies:
  flutter_test:
    sdk: flutter
  integration_test:
    sdk: flutter
  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.1
  # dio client generator using source_gen
  retrofit_generator: ^4.2.0
  # A build system for Dart code generation and modular compilation.
  # command => flutter pub run build_runner build
  build_runner: 2.3.2
  # Automatically generate code for converting to and from JSON by annotating Dart classes
  json_serializable: ^6.5.3

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - assets/i18n/
    - assets/fonts/
    - assets/icons/

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: AirStrikeHalf
      fonts:
        - asset: assets/fonts/airstrikehalf.ttf

    - family: openSans
      fonts:
        - asset: assets/fonts/OpenSans-Bold.ttf
          weight: 800
        - asset: assets/fonts/OpenSans-ExtraBold.ttf
          weight: 900
        - asset: assets/fonts/OpenSans-Light.ttf
          weight: 300
        - asset: assets/fonts/OpenSans-Regular.ttf
          weight: 500
        - asset: assets/fonts/OpenSans-SemiBold.ttf
          weight: 700
